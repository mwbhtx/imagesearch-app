{"version":3,"sources":["pages/image-search/pexel-slice.jsx","pages/image-search/image-search-home.jsx","redux/redux-store.jsx","index.js"],"names":["pexelSlice","createSlice","name","initialState","value","reducers","replacePexelObject","state","action","payload","actions","SearchBar","useSelector","pexel","dispatch","useDispatch","useState","formValue","setFormValue","fetchPexelImages","e","a","preventDefault","process","REACT_APP_PEXELS_API_KEY","queryParamsAsUrlString","URLSearchParams","query","per_page","toString","fetchUrl","url","fetch","method","response","ok","json","pexelResponse","Error","className","id","src","onSubmit","type","onChange","target","ImageResultsGallery","props","pexelData","pexelImageList","onInfoClick","currentTarget","getAttribute","document","getElementById","classList","toggle","photos","Object","entries","imageURL","portrait","imageID","imageArtist","photographer","photographerURL","photographer_url","avgColor","avg_color","push","style","backgroundColor","href","tag","onClick","renderPexelList","App","configureStore","reducer","pexelSliceReducer","ReactDOM","render","StrictMode","store"],"mappings":"0RAGMA,EAAaC,YAAY,CAC3BC,KAAM,QACNC,aAAc,CACVC,MAAO,IAEXC,SAAU,CACNC,mBADM,SACaC,EAAOC,GACtBD,EAAMH,MAAQI,EAAOC,YAKlBT,IAAf,QACeM,EAAuBN,EAAWU,QAAlCJ,mB,eCGf,SAASK,IAEaC,aAAY,SAACL,GAAD,OAAWA,EAAMM,MAAMT,SAArD,IACMU,EAAWC,cAEjB,EAAgCC,mBAAS,SAAzC,mBAAKC,EAAL,KAAgBC,EAAhB,KAMMC,EAAgB,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DAErBD,EAAEE,iBAEgBC,mIAAYC,yBAClB,+BAMNC,EAAyB,IAAIC,gBALf,CAChBC,MAAOV,EACPW,SAAU,KAGkDC,WAE1DC,EAAWC,gCAAYN,EAbR,SAeEO,MAAMF,EAAU,CACnCG,OAAQ,QAhBS,YAefC,EAfe,QAoBRC,GApBQ,kCAqBWD,EAASE,OArBpB,QAqBXC,EArBW,OAsBjBvB,EAASR,EAAmB+B,IAtBX,8BAwBX,IAAIC,MAAM,iCAxBC,4CAAH,sDA6BtB,OAEI,sBAAKC,UAAU,uBAAf,UAEI,gCACI,0DACA,sBAAKC,GAAG,sBAAR,UACI,6CACA,qBAAKA,GAAG,cAAcC,IAAI,uDAIlC,uBAAMD,GAAG,oBAAoBE,SAAUvB,EAAvC,UACI,uBAAOwB,KAAK,OAAOvC,MAAOa,EAAW2B,SA9CvB,SAACxB,GACvBF,EAAaE,EAAEyB,OAAOzC,UA8Cd,uBAAOuC,KAAK,SAASvC,MAAM,cAG/B,oBAAIoC,GAAG,qBAAP,mDAOZ,SAASM,EAAoBC,GAEzB,IAAIC,EAAYpC,aAAY,SAAAL,GAAK,OAAIA,EAAMM,MAAMT,SAE7C6C,EAAiB,GAEfC,EAAc,SAAA9B,GAEhB,IAAMoB,EAAKpB,EAAE+B,cAAcC,aAAa,OAExBC,SAASC,eAAed,GAChCe,UAAUC,OAAO,YAiC7B,OACI,qBAAKjB,UAAU,oBAAf,SA/BoB,WACpB,GAAIS,EAAUS,OACV,cAAwBC,OAAOC,QAAQX,EAAUS,QAAjD,eAA0D,CAArD,0BAASrD,GAAT,WAEKwD,EAAWxD,EAAMqC,IAAIoB,SACrBC,EAAU1D,EAAMoC,GAChBuB,EAAc3D,EAAM4D,aACpBC,EAAkB7D,EAAM8D,iBACxBC,EAAW/D,EAAMgE,UAEvBnB,EAAeoB,KACX,sBAAmB9B,UAAU,2BAA2B+B,MAAO,CAAEC,gBAAiBJ,GAAlF,UACA,sBAAK5B,UAAU,yBAAyBC,GAAIsB,EAA5C,UAEI,gDACA,mBAAGvB,UAAU,cAAciC,KAAMP,EAAiBpB,OAAO,SAAzD,SAAmEkB,IACnE,mBAAGxB,UAAU,aAAaiC,KAAMZ,EAAUf,OAAO,SAAjD,2BAEA,sBAAKN,UAAU,sBAAsBkC,IAAKX,EAAUY,QAASxB,EAA7D,UACI,sBAAMX,UAAU,iBAChB,mBAAGA,UAAU,6BAEjB,qBAAKE,IAAKmB,MAXJE,IAgBtB,OAAOb,EAKF0B,KAKEC,MA7Hf,WAEI,OACI,qCACI,cAACjE,EAAD,IACA,cAACmC,EAAD,QCXG+B,cAAe,CAC1BC,QAAS,CACLjE,MAAOkE,KCEfC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJ9B,SAASC,eAAe,W","file":"static/js/main.e02a7d2b.chunk.js","sourcesContent":["import {createSlice, current} from '@reduxjs/toolkit';\n\n// Create the Pexel Slice of the Redux Store\nconst pexelSlice = createSlice({\n    name: 'pexel',      // give a name for the slice in the store\n    initialState: {     // give an initial state for the slice\n        value: {}\n    },\n    reducers: {         // give the available reducer actions to modify state\n        replacePexelObject(state, action) {\n            state.value = action.payload;\n        },\n    }\n})\n\nexport default pexelSlice.reducer;  // for use when creating store\nexport const { replacePexelObject } = pexelSlice.actions; // for use by components to update store value\n\n","import './image-search-styles.css';\nimport '../../styles/global-styles.css';\nimport React, {useEffect, useState} from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\nimport { replacePexelObject } from './pexel-slice';\nimport 'dotenv/config'\n\n\n\nfunction App() {\n\n    return (\n        <>\n            <SearchBar/>\n            <ImageResultsGallery/>\n        </>\n    )\n}\n\nfunction SearchBar() {\n\n    const pexelData = useSelector((state) => state.pexel.value) // for accessing pexel store data\n    const dispatch = useDispatch();\n\n    let [formValue, setFormValue] = useState('candy');\n\n    const onFormInputChange = (e) => {\n        setFormValue(e.target.value);\n    }\n\n    const fetchPexelImages = async (e) => {\n\n        e.preventDefault();\n        \n        const pexelsApi = process.env.REACT_APP_PEXELS_API_KEY; \n        const url = 'http://localhost:3001/search';\n        const queryParams = {\n            query: formValue,\n            per_page: 80,\n        }; \n        \n        const queryParamsAsUrlString = new URLSearchParams(queryParams).toString();\n\n        const fetchUrl = url + '?' + queryParamsAsUrlString;\n\n        const response = await fetch(fetchUrl, {\n            method: 'GET',\n        })\n\n\n        if (response.ok) {\n            const pexelResponse = await response.json();\n            dispatch(replacePexelObject(pexelResponse));\n        } else {\n            throw new Error('Oops, response error occured!');\n        }\n        \n    }\n\n    return (\n        \n        <div className='search-bar-container'>\n\n            <div>\n                <h2>Image Search by Category</h2>\n                <div id='poweredby-container'>\n                    <h5>POWERED BY:</h5>\n                    <img id='pexels-logo' src='https://images.pexels.com/lib/api/pexels.png'/>\n                </div>\n            </div>\n\n            <form id='search-input-form' onSubmit={fetchPexelImages}>\n                <input type='text' value={formValue} onChange={onFormInputChange}/>\n                <input type=\"submit\" value=\"search\"/>\n            </form>\n\n            <h4 id='search-helper-text'>e.g. ocean, nature, people, soccer</h4>  \n\n        </div>\n\n    )\n}\n\nfunction ImageResultsGallery(props) {\n\n    let pexelData = useSelector(state => state.pexel.value);\n\n    let pexelImageList = [];\n\n    const onInfoClick = e => {\n\n        const id = e.currentTarget.getAttribute('tag');\n\n        const element = document.getElementById(id);\n        element.classList.toggle('visible');\n    }\n\n    const renderPexelList = () => {\n        if (pexelData.photos) {\n            for (let [key,value] of Object.entries(pexelData.photos)) {\n\n                const imageURL = value.src.portrait;\n                const imageID = value.id;\n                const imageArtist = value.photographer;\n                const photographerURL = value.photographer_url;\n                const avgColor = value.avg_color;\n\n                pexelImageList.push(\n                    <div key={imageID} className='image-container md-light' style={{ backgroundColor: avgColor}}>\n                    <div className='image-detail-container' id={imageID}>\n                        \n                        <span>Photographer</span>\n                        <a className='artist-link' href={photographerURL} target='_blank'>{imageArtist}</a>\n                        <a className='image-link' href={imageURL} target='_blank'>view image</a>\n                    </div>\n                        <div className='info-icon-container' tag={imageID}  onClick={onInfoClick}>\n                            <span className='circle-layer'/>\n                            <i className=\"fas fa-bars info-icon\"></i>\n                        </div>\n                        <img src={imageURL}/>\n                    </div>\n                )\n            }\n        }\n        return pexelImageList;\n    }\n\n    return (\n        <div className='gallery-container'>\n            {renderPexelList()}\n        </div>\n    )\n}\n\nexport default App;","import { configureStore } from '@reduxjs/toolkit'\nimport pexelSliceReducer from '../pages/image-search/pexel-slice.jsx'\n\nexport default configureStore({\n    reducer: {\n        pexel: pexelSliceReducer,\n    }\n})\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {default as ImageSearchApp} from './pages/image-search/image-search-home.jsx';\nimport store from './redux/redux-store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ImageSearchApp/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}