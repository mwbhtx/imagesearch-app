{"version":3,"sources":["features/image-search/pexel-slice.jsx","features/image-search/image-search-home.jsx","redux/redux-store.jsx","index.js"],"names":["pexelSlice","createSlice","name","initialState","value","reducers","replacePexelObject","state","action","payload","actions","SearchBar","useSelector","pexel","dispatch","useDispatch","useState","searchType","formValue","setFormValue","fetchPexelImages","e","a","preventDefault","queryParams","query","per_page","queryParamsAsUrlString","URLSearchParams","toString","fetchUrl","url","fetch","method","headers","Headers","Authorization","response","ok","json","pexelResponse","Error","className","id","src","onSubmit","onChange","target","type","ImageResultsGallery","props","pexelData","pexelImageList","photos","Object","entries","imageURL","portrait","imageID","imageArtist","photographer","photographerURL","photographer_url","push","href","rel","toUpperCase","renderPexelList","App","configureStore","reducer","pexelSliceReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"iSAGMA,EAAaC,YAAY,CAC3BC,KAAM,QACNC,aAAc,CACVC,MAAO,IAEXC,SAAU,CACNC,mBADM,SACaC,EAAOC,GACtBD,EAAMH,MAAQI,EAAOC,YAKlBT,IAAf,QACeM,EAAuBN,EAAWU,QAAlCJ,mB,OCEf,SAASK,IAEaC,aAAY,SAACL,GAAD,OAAWA,EAAMM,MAAMT,SAArD,IACMU,EAAWC,cAEjB,EAAgCC,mBAAS,CACrCC,WAAY,cADhB,mBAAKC,EAAL,KAAgBC,EAAhB,KAQMC,EAAgB,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAErBD,EAAEE,iBAEe,2DACL,mCACNC,EAAc,CAChBC,MAAOP,EAAS,WAChBQ,SAAU,IAGRC,EAAyB,IAAIC,gBAAgBJ,GAAaK,WAE1DC,EAAWC,oCAAYJ,EAbR,SAeEK,MAAMF,EAAU,CACnCG,OAAQ,MACRC,QAAS,IAAIC,QAAQ,CACjBC,cAdS,+DAJI,YAefC,EAfe,QAsBRC,GAtBQ,kCAuBWD,EAASE,OAvBpB,QAuBXC,EAvBW,OAwBjB1B,EAASR,EAAmBkC,IAxBX,8BA0BX,IAAIC,MAAM,iCA1BC,4CAAH,sDA+BtB,OAEI,sBAAKC,UAAU,uBAAf,UACI,sBAAKC,GAAG,kBAAR,UACI,+DACA,sBAAKA,GAAG,iBAAR,UACI,6CACA,qBAAKA,GAAG,cAAcC,IAAI,uDAGlC,uBAAMD,GAAG,oBAAoBE,SAAUzB,EAAvC,UACI,uBAAOsB,UAAU,cAAcxC,KAAK,aAAaE,MAAOc,EAAUD,WAAY6B,SA9ChE,SAACzB,GACvBF,EAAa,eAAEE,EAAE0B,OAAO7C,KAAOmB,EAAE0B,OAAO3C,WA8ChC,wBAAQuC,GAAG,gBAAgBK,KAAK,SAAhC,uBAEA,oBAAIL,GAAG,qBAAP,mDAOhB,SAASM,EAAoBC,GAEzB,IAAIC,EAAYvC,aAAY,SAAAL,GAAK,OAAIA,EAAMM,MAAMT,SAC7CgD,EAAiB,GA0BrB,OACI,qBAAKT,GAAG,oBAAR,SAzBoB,WACpB,GAAIQ,EAAUE,OACV,cAAwBC,OAAOC,QAAQJ,EAAUE,QAAjD,eAA0D,CAArD,0BAASjD,GAAT,WAEKoD,EAAWpD,EAAMwC,IAAIa,SACrBC,EAAUtD,EAAMuC,GAChBgB,EAAcvD,EAAMwD,aACpBC,EAAkBzD,EAAM0D,iBAE9BV,EAAeW,KACX,sBAAmBrB,UAAU,kBAA7B,UAEI,sBAAKA,UAAU,gBAAgBC,GAAIe,EAAnC,UACI,mBAAGM,KAAMH,EAAiBd,OAAO,SAASkB,IAAI,sBAA9C,SAAqEN,EAAYO,gBACjF,mBAAGF,KAAMR,EAAUT,OAAO,SAASkB,IAAI,sBAAvC,2BAEJ,qBAAKrB,IAAKY,MANJE,IAWtB,OAAON,EAKEe,KAKFC,MA/Gf,WAEI,OACI,qCACI,cAACzD,EAAD,IACA,cAACsC,EAAD,QCVGoB,cAAe,CAC1BC,QAAS,CACLzD,MAAO0D,KCEfC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.99fc3760.chunk.js","sourcesContent":["import {createSlice, current} from '@reduxjs/toolkit';\n\n// Create the Pexel Slice of the Redux Store\nconst pexelSlice = createSlice({\n    name: 'pexel',      // give a name for the slice in the store\n    initialState: {     // give an initial state for the slice\n        value: {}\n    },\n    reducers: {         // give the available reducer actions to modify state\n        replacePexelObject(state, action) {\n            state.value = action.payload;\n        },\n    }\n})\n\nexport default pexelSlice.reducer;  // for use when creating store\nexport const { replacePexelObject } = pexelSlice.actions; // for use by components to update store value\n\n","import './image-search-styles.css';\nimport '../../styles/global-styles.css';\nimport React, {useEffect, useState} from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\nimport { replacePexelObject } from './pexel-slice';\n\n\n\nfunction App() {\n\n    return (\n        <>\n            <SearchBar/>\n            <ImageResultsGallery/>\n        </>\n    )\n}\n\nfunction SearchBar() {\n\n    const pexelData = useSelector((state) => state.pexel.value) // for accessing pexel store data\n    const dispatch = useDispatch();\n\n    let [formValue, setFormValue] = useState({\n        searchType: 'developer',\n    });\n\n    const onFormInputChange = (e) => {\n        setFormValue({[e.target.name]: e.target.value});\n    }\n\n    const fetchPexelImages = async (e) => {\n\n        e.preventDefault();\n\n        const pexelsApi ='563492ad6f91700001000001291af02ee90342b29ea9785780da877d';    \n        const url = 'https://api.pexels.com/v1/search';\n        const queryParams = {\n            query: formValue['searchType'],\n            per_page: 80,\n        }; \n        \n        const queryParamsAsUrlString = new URLSearchParams(queryParams).toString();\n\n        const fetchUrl = url + '?' + queryParamsAsUrlString;\n\n        const response = await fetch(fetchUrl, {\n            method: 'GET',\n            headers: new Headers({\n                Authorization: pexelsApi\n            })\n        })\n\n        if (response.ok) {\n            const pexelResponse = await response.json();\n            dispatch(replacePexelObject(pexelResponse));\n        } else {\n            throw new Error('Oops, response error occured!');\n        }\n        \n    }\n\n    return (\n        \n        <div className='search-bar-container'>\n            <div id='search-headline'>\n                <h2>Search for Images by Category</h2>\n                <div id='powered-by-box'>\n                    <h5>POWERED BY:</h5>\n                    <img id='pexels-logo' src='https://images.pexels.com/lib/api/pexels.png'/>\n                </div>\n            </div>\n            <form id='search-input-form' onSubmit={fetchPexelImages}>\n                <input className=\"input-field\" name='searchType' value={formValue.searchType} onChange={onFormInputChange}/>\n                <button id='search-button' type=\"submit\">search</button>\n            </form>\n                <h4 id='search-helper-text'>e.g. ocean, nature, people, soccer</h4>\n                \n        </div>\n\n    )\n}\n\nfunction ImageResultsGallery(props) {\n\n    let pexelData = useSelector(state => state.pexel.value);\n    let pexelImageList = [];\n\n    const renderPexelList = () => {\n        if (pexelData.photos) {\n            for (let [key,value] of Object.entries(pexelData.photos)) {\n\n                const imageURL = value.src.portrait;\n                const imageID = value.id;\n                const imageArtist = value.photographer;\n                const photographerURL = value.photographer_url;\n\n                pexelImageList.push(\n                    <div key={imageID} className='image-container'>\n                        {/* <img id='touch-icon' src=\"https://img.icons8.com/ios-filled/50/000000/3d-touch--v1.png\"/> */}\n                        <div className='image-details' id={imageID}>\n                            <a href={photographerURL} target=\"_blank\" rel=\"noopener noreferrer\">{imageArtist.toUpperCase()}</a>\n                            <a href={imageURL} target=\"_blank\" rel=\"noopener noreferrer\">VIEW IMAGE</a>\n                        </div>\n                        <img src={imageURL}/>\n                    </div>\n                )\n            }\n        }\n        return pexelImageList;\n    }\n\n    return (\n        <div id='gallery-container'>\n                {renderPexelList()}\n        </div>\n    )\n}\n\nexport default App;","import { configureStore } from '@reduxjs/toolkit'\nimport pexelSliceReducer from '../features/image-search/pexel-slice.jsx'\n\nexport default configureStore({\n    reducer: {\n        pexel: pexelSliceReducer,\n    }\n})\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {default as ImageSearchApp} from './features/image-search/image-search-home.jsx';\nimport store from './redux/redux-store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ImageSearchApp/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}